'dataset': dataset_name,
'depth': config['depth'],
'nb_filters': config['nb_filters'],
'batch_size': config['batch_size'],
'kernel_size': config['kernel_size'],
'use_residual': 'True' if config['use_residual'] else 'False',
'use_bottleneck': 'True' if config['use_bottleneck'] else 'False',
'acc': acc,
'precision': precision,
'recall': recal,
'budget_ran': len(val_cur),
'train_curve': train_cur.tolist(),
'val_curve': val_cur.tolist(),
'train_curve 1': train_curve[0].tolist(),
'val_curve 1': val_curve[0].tolist(),
'acc 1': test_acc[0],
'precision 1': test_pres[0],
'recall 1': test_recall[0],
'train_curve 2': train_curve[1].tolist(),
'val_curve 2': val_curve[1].tolist(),
'acc 2': test_acc[1],
'precision 2': test_pres[1],
'recall 2': test_recall[1],
'train_curve 3': train_curve[2].tolist(),
'val_curve 3': val_curve[2].tolist(),
'acc 3': test_acc[2],
'precision 3': test_pres[2],
'recall 3': test_recall[2],
'train_curve 4': train_curve[3].tolist(),
'val_curve 4': val_curve[3].tolist(),
'acc 4': test_acc[3],
'precision 4': test_pres[3],
'recall 4': test_recall[3],
'train_curve 5': train_curve[4].tolist(),
'val_curve 5': val_curve[4].tolist(),
'acc 5': test_acc[4],
'precision 5': test_pres[4],
'recall 5': test_recall[4]